{"mappings":"ICKI,EAAO,EAIP,EATJ,MAAM,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,UACtC,EAAmB,SAAS,aAAa,CAAC,eAC1C,EAAW,SAAS,gBAAgB,CAAC,eAC3C,IAAI,EAAW,CAAA,EAEX,EAAS,EAAG,EAAS,EACrB,EAAY,EAAG,EAAY,EAC3B,EAAY,EAAE,CAEd,EAAQ,EAER,EAAY,aAAa,OAAO,CAAC,eAAiB,CACtD,CAAA,EAAiB,SAAS,CAAG,CAAC,4CAAQ,EAAE,EAAA,CAAW,CACnD,MAAM,EAAqB,KAEvB,EAAQ,KAAK,KAAK,CAAC,AAAgB,GAAhB,KAAK,MAAM,IAAW,EACzC,EAAQ,KAAK,KAAK,CAAC,AAAgB,GAAhB,KAAK,MAAM,IAAW,CAC7C,EACM,EAAiB,KAEnB,cAAc,GACd,MAAM,+CACN,SAAS,MAAM,EACnB,EACM,EAAkB,AAAA,IAEjB,AAAU,YAAV,EAAE,GAAG,EAAkB,AAAa,GAAb,GACtB,EAAY,EACZ,EAAY,IACN,AAAU,cAAV,EAAE,GAAG,EAAoB,AAAa,IAAb,GAC/B,EAAY,EACZ,EAAY,GACN,AAAU,cAAV,EAAE,GAAG,EAAoB,AAAa,GAAb,GAC/B,EAAY,GACZ,EAAY,GACI,eAAV,EAAE,GAAG,EAAqB,AAAa,IAAb,IAChC,EAAY,EACZ,EAAY,EAEpB,EAEA,EAAS,OAAO,CAAC,AAAA,GAAU,EAAO,gBAAgB,CAAC,QAAS,IAAM,EAAgB,CAAE,IAAK,EAAO,OAAO,CAAC,GAAG,AAAC,KAqC5G,IACA,EAAgB,YArCC,KACb,GAAG,EAAU,OAAO,IACpB,IAAI,EAAO,CAAC,oCAAoC,EAAE,EAAM,GAAG,EAAE,EAAM,QAAQ,CAAC,CAEzE,IAAW,GAAS,IAAW,IAC9B,IACA,EAAU,IAAI,CAAC,CAAC,EAAO,EAAM,EAE7B,EAAY,EAAA,GAAS,EAAY,EAAQ,EACzC,aAAa,OAAO,CAAC,aAAc,GACnC,EAAa,SAAS,CAAG,CAAC,mDAAS,EAAE,EAAA,CAAO,CAC5C,EAAiB,SAAS,CAAG,CAAC,4CAAQ,EAAE,EAAA,CAAW,EAGvD,GAAU,EACV,GAAU,EAGV,IAAK,IAAI,EAAI,EAAU,MAAM,CAAG,EAAG,EAAI,EAAG,IACtC,CAAS,CAAC,EAAE,CAAG,CAAS,CAAC,EAAI,EAAE,CAInC,GAFA,CAAS,CAAC,EAAE,CAAG,CAAC,EAAQ,EAAO,CAE5B,GAAU,GAAK,EAAS,IAAM,GAAU,GAAK,EAAS,GACrD,OAAO,EAAW,CAAA,EAEtB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,MAAM,CAAE,IAElC,GAAQ,CAAC,oCAAoC,EAAE,CAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAS,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAEnF,IAAN,GAAW,CAAS,CAAC,EAAE,CAAC,EAAE,GAAK,CAAS,CAAC,EAAE,CAAC,EAAE,EAAI,CAAS,CAAC,EAAE,CAAC,EAAE,GAAK,CAAS,CAAC,EAAE,CAAC,EAAE,EACrF,CAAA,EAAW,CAAA,CADf,CAIJ,CAAA,EAAU,SAAS,CAAG,CAC1B,EAEsC,KACtC,SAAS,gBAAgB,CAAC,QAAS,GAEnC,SAAS,gBAAgB,CAAC,mBAAoB,WAK1C,AAHiB,SAAS,aAAa,CAAC,yBAG7B,gBAAgB,CAAC,QAAS,WAEnC,OAAO,KAAK,EACd,EACF","sources":["<anon>","js/snake.js"],"sourcesContent":["const playBoard = document.querySelector(\".play-board\");\nconst scoreElement = document.querySelector(\".score\");\nconst highScoreElement = document.querySelector(\".high-score\");\nconst controls = document.querySelectorAll(\".controls i\");\nlet gameOver = false;\nlet foodX, foodY;\nlet snakeX = 5, snakeY = 5;\nlet velocityX = 0, velocityY = 0;\nlet snakeBody = [];\nlet setIntervalId;\nlet score = 0;\n// Getting high score from the local storage\nlet highScore = localStorage.getItem(\"high-score\") || 0;\nhighScoreElement.innerText = `\\u{420}\\u{435}\\u{43A}\\u{43E}\\u{440}\\u{434}: ${highScore}`;\nconst updateFoodPosition = ()=>{\n    // Passing a random 1 - 30 value as food position\n    foodX = Math.floor(Math.random() * 30) + 1;\n    foodY = Math.floor(Math.random() * 30) + 1;\n};\nconst handleGameOver = ()=>{\n    // Clearing the timer and reloading the page on game over\n    clearInterval(setIntervalId);\n    alert(\"\\u0412\\u0438 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043B\\u0438! \\u041D\\u0430\\u0442\\u0438\\u0441\\u043D\\u0456\\u0442\\u044C \\u0449\\u043E\\u0431 \\u043F\\u043E\\u0447\\u0430\\u0442\\u0438 \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E...\");\n    location.reload();\n};\nconst changeDirection = (e)=>{\n    // Changing velocity value based on key press\n    if (e.key === \"ArrowUp\" && velocityY != 1) {\n        velocityX = 0;\n        velocityY = -1;\n    } else if (e.key === \"ArrowDown\" && velocityY != -1) {\n        velocityX = 0;\n        velocityY = 1;\n    } else if (e.key === \"ArrowLeft\" && velocityX != 1) {\n        velocityX = -1;\n        velocityY = 0;\n    } else if (e.key === \"ArrowRight\" && velocityX != -1) {\n        velocityX = 1;\n        velocityY = 0;\n    }\n};\n// Calling changeDirection on each key click and passing key dataset value as an object\ncontrols.forEach((button)=>button.addEventListener(\"click\", ()=>changeDirection({\n            key: button.dataset.key\n        })));\nconst initGame = ()=>{\n    if (gameOver) return handleGameOver();\n    let html = `<div class=\"food\" style=\"grid-area: ${foodY} / ${foodX}\"></div>`;\n    // Checking if the snake hit the food\n    if (snakeX === foodX && snakeY === foodY) {\n        updateFoodPosition();\n        snakeBody.push([\n            foodY,\n            foodX\n        ]); // Pushing food position to snake body array\n        score++; // increment score by 1\n        highScore = score >= highScore ? score : highScore;\n        localStorage.setItem(\"high-score\", highScore);\n        scoreElement.innerText = `\\u{420}\\u{430}\\u{445}\\u{443}\\u{43D}\\u{43E}\\u{43A}: ${score}`;\n        highScoreElement.innerText = `\\u{420}\\u{435}\\u{43A}\\u{43E}\\u{440}\\u{434}: ${highScore}`;\n    }\n    // Updating the snake's head position based on the current velocity\n    snakeX += velocityX;\n    snakeY += velocityY;\n    // Shifting forward the values of the elements in the snake body by one\n    for(let i = snakeBody.length - 1; i > 0; i--)snakeBody[i] = snakeBody[i - 1];\n    snakeBody[0] = [\n        snakeX,\n        snakeY\n    ]; // Setting first element of snake body to current snake position\n    // Checking if the snake's head is out of wall, if so setting gameOver to true\n    if (snakeX <= 0 || snakeX > 30 || snakeY <= 0 || snakeY > 30) return gameOver = true;\n    for(let i = 0; i < snakeBody.length; i++){\n        // Adding a div for each part of the snake's body\n        html += `<div class=\"head\" style=\"grid-area: ${snakeBody[i][1]} / ${snakeBody[i][0]}\"></div>`;\n        // Checking if the snake head hit the body, if so set gameOver to true\n        if (i !== 0 && snakeBody[0][1] === snakeBody[i][1] && snakeBody[0][0] === snakeBody[i][0]) gameOver = true;\n    }\n    playBoard.innerHTML = html;\n};\nupdateFoodPosition();\nsetIntervalId = setInterval(initGame, 100);\ndocument.addEventListener(\"keyup\", changeDirection);\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Отримайте елемент кнопки back-to-games\n    var backButton = document.querySelector('.back-to-games button');\n    // Додайте слухач подій кліку для кнопки\n    backButton.addEventListener('click', function() {\n        // Закрийте поточне вікно\n        window.close();\n    });\n});\n\n//# sourceMappingURL=snake.23a571ac.js.map\n","const playBoard = document.querySelector(\".play-board\");\nconst scoreElement = document.querySelector(\".score\");\nconst highScoreElement = document.querySelector(\".high-score\");\nconst controls = document.querySelectorAll(\".controls i\");\nlet gameOver = false;\nlet foodX, foodY;\nlet snakeX = 5, snakeY = 5;\nlet velocityX = 0, velocityY = 0;\nlet snakeBody = [];\nlet setIntervalId;\nlet score = 0;\n// Getting high score from the local storage\nlet highScore = localStorage.getItem(\"high-score\") || 0;\nhighScoreElement.innerText = `Рекорд: ${highScore}`;\nconst updateFoodPosition = () => {\n    // Passing a random 1 - 30 value as food position\n    foodX = Math.floor(Math.random() * 30) + 1;\n    foodY = Math.floor(Math.random() * 30) + 1;\n}\nconst handleGameOver = () => {\n    // Clearing the timer and reloading the page on game over\n    clearInterval(setIntervalId);\n    alert(\"Ви програли! Натисніть щоб почати заново...\");\n    location.reload();\n}\nconst changeDirection = e => {\n    // Changing velocity value based on key press\n    if(e.key === \"ArrowUp\" && velocityY != 1) {\n        velocityX = 0;\n        velocityY = -1;\n    } else if(e.key === \"ArrowDown\" && velocityY != -1) {\n        velocityX = 0;\n        velocityY = 1;\n    } else if(e.key === \"ArrowLeft\" && velocityX != 1) {\n        velocityX = -1;\n        velocityY = 0;\n    } else if(e.key === \"ArrowRight\" && velocityX != -1) {\n        velocityX = 1;\n        velocityY = 0;\n    }\n}\n// Calling changeDirection on each key click and passing key dataset value as an object\ncontrols.forEach(button => button.addEventListener(\"click\", () => changeDirection({ key: button.dataset.key })));\nconst initGame = () => {\n    if(gameOver) return handleGameOver();\n    let html = `<div class=\"food\" style=\"grid-area: ${foodY} / ${foodX}\"></div>`;\n    // Checking if the snake hit the food\n    if(snakeX === foodX && snakeY === foodY) {\n        updateFoodPosition();\n        snakeBody.push([foodY, foodX]); // Pushing food position to snake body array\n        score++; // increment score by 1\n        highScore = score >= highScore ? score : highScore;\n        localStorage.setItem(\"high-score\", highScore);\n        scoreElement.innerText = `Рахунок: ${score}`;\n        highScoreElement.innerText = `Рекорд: ${highScore}`;\n    }\n    // Updating the snake's head position based on the current velocity\n    snakeX += velocityX;\n    snakeY += velocityY;\n    \n    // Shifting forward the values of the elements in the snake body by one\n    for (let i = snakeBody.length - 1; i > 0; i--) {\n        snakeBody[i] = snakeBody[i - 1];\n    }\n    snakeBody[0] = [snakeX, snakeY]; // Setting first element of snake body to current snake position\n    // Checking if the snake's head is out of wall, if so setting gameOver to true\n    if(snakeX <= 0 || snakeX > 30 || snakeY <= 0 || snakeY > 30) {\n        return gameOver = true;\n    }\n    for (let i = 0; i < snakeBody.length; i++) {\n        // Adding a div for each part of the snake's body\n        html += `<div class=\"head\" style=\"grid-area: ${snakeBody[i][1]} / ${snakeBody[i][0]}\"></div>`;\n        // Checking if the snake head hit the body, if so set gameOver to true\n        if (i !== 0 && snakeBody[0][1] === snakeBody[i][1] && snakeBody[0][0] === snakeBody[i][0]) {\n            gameOver = true;\n        }\n    }\n    playBoard.innerHTML = html;\n}\nupdateFoodPosition();\nsetIntervalId = setInterval(initGame, 100);\ndocument.addEventListener(\"keyup\", changeDirection);\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Отримайте елемент кнопки back-to-games\n    var backButton = document.querySelector('.back-to-games button');\n\n    // Додайте слухач подій кліку для кнопки\n    backButton.addEventListener('click', function () {\n      // Закрийте поточне вікно\n      window.close();\n    });\n  });"],"names":["foodX","foodY","setIntervalId","playBoard","document","querySelector","scoreElement","highScoreElement","controls","querySelectorAll","gameOver","snakeX","snakeY","velocityX","velocityY","snakeBody","score","highScore","localStorage","getItem","innerText","updateFoodPosition","Math","floor","random","handleGameOver","clearInterval","alert","location","reload","changeDirection","e","key","forEach","button","addEventListener","dataset","setInterval","html","push","setItem","i","length","innerHTML","backButton","window","close"],"version":3,"file":"snake.23a571ac.js.map"}