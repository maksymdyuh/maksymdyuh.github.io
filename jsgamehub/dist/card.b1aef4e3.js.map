{"mappings":"AAAA,MAAM,QAAQ,SAAS,gBAAgB,CAAC,UACxC,UAAU,SAAS,aAAa,CAAC,YACjC,WAAW,SAAS,aAAa,CAAC,aAClC,aAAa,SAAS,aAAa,CAAC;AAEpC,IAAI,UAAU;AACd,IAAI,WAAW;AACf,IAAI,QAAQ;AACZ,IAAI,cAAc;AAClB,IAAI,cAAc;AAClB,IAAI,YAAY;AAChB,IAAI,SAAS,SAAS;AAEtB,SAAS;IACL,IAAG,YAAY,GACX,OAAO,cAAc;IAEzB;IACA,QAAQ,SAAS,GAAG;AACxB;AAEA,SAAS,SAAS,EAAC,QAAQ,WAAW,EAAC;IACnC,IAAG,CAAC,WAAW;QACX,YAAY;QACZ,QAAQ,YAAY,WAAW;IACnC;IACA,IAAG,gBAAgB,WAAW,CAAC,eAAe,WAAW,GAAG;QACxD;QACA,SAAS,SAAS,GAAG;QACrB,YAAY,SAAS,CAAC,GAAG,CAAC;QAC1B,IAAG,CAAC,SACA,OAAO,UAAU;QAErB,UAAU;QACV,cAAc;QACd,IAAI,aAAa,QAAQ,aAAa,CAAC,kBAAkB,GAAG,EAC5D,aAAa,QAAQ,aAAa,CAAC,kBAAkB,GAAG;QACxD,WAAW,YAAY;IAC3B;AACJ;AAEA,SAAS,WAAW,IAAI,EAAE,IAAI;IAC1B,IAAG,SAAS,MAAM;QACd;QACA,IAAG,eAAe,KAAK,WAAW,GAC9B,OAAO,cAAc;QAEzB,QAAQ,mBAAmB,CAAC,SAAS;QACrC,QAAQ,mBAAmB,CAAC,SAAS;QACrC,UAAU,UAAU;QACpB,OAAO,cAAc;IACzB;IAEA,WAAW;QACP,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,QAAQ,SAAS,CAAC,GAAG,CAAC;IAC1B,GAAG;IAEH,WAAW;QACP,QAAQ,SAAS,CAAC,MAAM,CAAC,SAAS;QAClC,QAAQ,SAAS,CAAC,MAAM,CAAC,SAAS;QAClC,UAAU,UAAU;QACpB,cAAc;IAClB,GAAG;AACP;AAEA,SAAS;IACL,WAAW;IACX,QAAQ,cAAc;IACtB,UAAU,UAAU;IACpB,cAAc;IACd,QAAQ,SAAS,GAAG;IACpB,SAAS,SAAS,GAAG;IACrB,cAAc,YAAY;IAE1B,IAAI,MAAM;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE;IAC9C,IAAI,IAAI,CAAC,IAAM,KAAK,MAAM,KAAK,MAAM,IAAI;IAEzC,MAAM,OAAO,CAAC,CAAC,MAAM;QACjB,KAAK,SAAS,CAAC,MAAM,CAAC;QACtB,IAAI,SAAS,KAAK,aAAa,CAAC;QAChC,WAAW;YACP,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;QAC5C,GAAG;QACH,KAAK,gBAAgB,CAAC,SAAS;IACnC;AACJ;AAEA;AAEA,WAAW,gBAAgB,CAAC,SAAS;AAErC,MAAM,OAAO,CAAC,CAAA;IACV,KAAK,gBAAgB,CAAC,SAAS;AACnC;AAEA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,yCAAyC;IACzC,IAAI,aAAa,SAAS,aAAa,CAAC;IAExC,wCAAwC;IACxC,WAAW,gBAAgB,CAAC,SAAS;QACnC,yBAAyB;QACzB,OAAO,KAAK;IACd;AACF","sources":["js/card.js"],"sourcesContent":["const cards = document.querySelectorAll(\".card\"),\r\ntimeTag = document.querySelector(\".time b\"),\r\nflipsTag = document.querySelector(\".flips b\"),\r\nrefreshBtn = document.querySelector(\".details button\");\r\n\r\nlet maxTime = 35;\r\nlet timeLeft = maxTime;\r\nlet flips = 0;\r\nlet matchedCard = 0;\r\nlet disableDeck = false;\r\nlet isPlaying = false;\r\nlet cardOne, cardTwo, timer;\r\n\r\nfunction initTimer() {\r\n    if(timeLeft <= 0) {\r\n        return clearInterval(timer);\r\n    }\r\n    timeLeft--;\r\n    timeTag.innerText = timeLeft;\r\n}\r\n\r\nfunction flipCard({target: clickedCard}) {\r\n    if(!isPlaying) {\r\n        isPlaying = true;\r\n        timer = setInterval(initTimer, 1000);\r\n    }\r\n    if(clickedCard !== cardOne && !disableDeck && timeLeft > 0) {\r\n        flips++;\r\n        flipsTag.innerText = flips;\r\n        clickedCard.classList.add(\"flip\");\r\n        if(!cardOne) {\r\n            return cardOne = clickedCard;\r\n        }\r\n        cardTwo = clickedCard;\r\n        disableDeck = true;\r\n        let cardOneImg = cardOne.querySelector(\".back-view img\").src,\r\n        cardTwoImg = cardTwo.querySelector(\".back-view img\").src;\r\n        matchCards(cardOneImg, cardTwoImg);\r\n    }\r\n}\r\n\r\nfunction matchCards(img1, img2) {\r\n    if(img1 === img2) {\r\n        matchedCard++;\r\n        if(matchedCard == 6 && timeLeft > 0) {\r\n            return clearInterval(timer);\r\n        }\r\n        cardOne.removeEventListener(\"click\", flipCard);\r\n        cardTwo.removeEventListener(\"click\", flipCard);\r\n        cardOne = cardTwo = \"\";\r\n        return disableDeck = false;\r\n    }\r\n\r\n    setTimeout(() => {\r\n        cardOne.classList.add(\"shake\");\r\n        cardTwo.classList.add(\"shake\");\r\n    }, 400);\r\n\r\n    setTimeout(() => {\r\n        cardOne.classList.remove(\"shake\", \"flip\");\r\n        cardTwo.classList.remove(\"shake\", \"flip\");\r\n        cardOne = cardTwo = \"\";\r\n        disableDeck = false;\r\n    }, 1200);\r\n}\r\n\r\nfunction shuffleCard() {\r\n    timeLeft = maxTime;\r\n    flips = matchedCard = 0;\r\n    cardOne = cardTwo = \"\";\r\n    clearInterval(timer);\r\n    timeTag.innerText = timeLeft;\r\n    flipsTag.innerText = flips;\r\n    disableDeck = isPlaying = false;\r\n\r\n    let arr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6];\r\n    arr.sort(() => Math.random() > 0.5 ? 1 : -1);\r\n\r\n    cards.forEach((card, index) => {\r\n        card.classList.remove(\"flip\");\r\n        let imgTag = card.querySelector(\".back-view img\");\r\n        setTimeout(() => {\r\n            imgTag.src = `img/img-${arr[index]}.png`;\r\n        }, 500);\r\n        card.addEventListener(\"click\", flipCard);\r\n    });\r\n}\r\n\r\nshuffleCard();\r\n\r\nrefreshBtn.addEventListener(\"click\", shuffleCard);\r\n\r\ncards.forEach(card => {\r\n    card.addEventListener(\"click\", flipCard);\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // Отримайте елемент кнопки back-to-games\r\n    var backButton = document.querySelector('.back-to-games button');\r\n\r\n    // Додайте слухач подій кліку для кнопки\r\n    backButton.addEventListener('click', function () {\r\n      // Закрийте поточне вікно\r\n      window.close();\r\n    });\r\n  });"],"names":[],"version":3,"file":"card.b1aef4e3.js.map","sourceRoot":"/__parcel_source_root/"}